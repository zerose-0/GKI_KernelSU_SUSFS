name: 测试发布

permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions
  
on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Do you want to create a release?'
        required: true
        type: boolean
        default: true
      kernelsu_variant:
        # description: "选择 KernelSU | 注意:选中MKSU时为标准版"
        description: "选择 KernelSU"
        required: true
        type: choice
        options:
          - Official
          - Next
          - MKSU
          - SukiSU
        default: SukiSU
      kernelsu_branch:
        description: "选择 ksu 分支"
        required: true
        type: choice
        options:
          - Stable(标准)
          - Dev(开发)
          - Other(其他/指定)
        default: Dev(开发)
      # kernelsu_branch_other:
      #   description: "如果选择了 “其他”，请指定您的自定义分支"
      #   required: false
      #   type: string  # This input is required if 'Other' is chosen
      version:
        description: '自定义版本名(如5.10.198后面的字符/留空则使用默认版本号)'
        required: false
        type: string
      use_zram:
        description: '是否开启增加更多ZRAM算法?'
        required: true
        type: boolean
        default: true
      use_bbg:
        description: '是否开启BBG防格机补丁?'
        required: true
        type: boolean
        default: true
      use_kpm:
        description: '是否开启KPM功能?'
        required: true
        type: boolean
        default: true
      get_manager:
        description: '是否同时获取最新KSU管理器?'
        required: true
        type: boolean
        default: false
jobs:
  get_manager:
    uses: ./.github/workflows/get-manager.yml
    secrets: inherit
    with:
      kernelsu_variant: ${{ inputs.kernelsu_variant }}

  build-kernel-a12-5-10:
    uses: ./.github/workflows/kernel-a12-5.10.yml
    secrets: inherit
    with:
      make_release: true
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      # # kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}
      version: ${{ inputs.version }}
      use_zram: ${{ inputs.use_zram }}
      use_kpm: ${{ inputs.use_kpm }}
      use_bbg: ${{ inputs.use_bbg }}

  # build-kernel-a13-5-10:
  #   uses: ./.github/workflows/kernel-a13-5.10.yml
  #   secrets: inherit
  #   with:
  #     make_release: ${{ inputs.make_release }}
  #     kernelsu_variant: ${{ inputs.kernelsu_variant }}
  #     kernelsu_branch: ${{ inputs.kernelsu_branch }}
  #     # kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}
  #     version: ${{ inputs.version }}
  #     use_zram: ${{ inputs.use_zram }}
  #     use_kpm: ${{ inputs.use_kpm }}

  build-kernel-a13-5-15:
    uses: ./.github/workflows/kernel-a13-5.15.yml
    secrets: inherit
    with:
      make_release: ${{ inputs.make_release }}
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      # kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}
      version: ${{ inputs.version }}
      use_zram: ${{ inputs.use_zram }}
      use_kpm: ${{ inputs.use_kpm }}
      use_bbg: ${{ inputs.use_bbg }}

  # build-kernel-a14-5-15:
  #   uses: ./.github/workflows/kernel-a14-5.15.yml
  #   secrets: inherit
  #   with:
  #     make_release: ${{ inputs.make_release }}
  #     kernelsu_variant: ${{ inputs.kernelsu_variant }}
  #     kernelsu_branch: ${{ inputs.kernelsu_branch }}
  #     # kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}
  #     version: ${{ inputs.version }}
  #     use_zram: ${{ inputs.use_zram }}
  #     use_kpm: ${{ inputs.use_kpm }}

  build-kernel-a14-6-1:
    uses: ./.github/workflows/kernel-a14-6.1.yml
    secrets: inherit
    with:
      make_release: ${{ inputs.make_release }}
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      # kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}
      version: ${{ inputs.version }}
      use_zram: ${{ inputs.use_zram }}
      use_kpm: ${{ inputs.use_kpm }}
      use_bbg: ${{ inputs.use_bbg }}

  build-kernel-a15-6-6:
    uses: ./.github/workflows/kernel-a15-6.6.yml
    secrets: inherit
    with:
      make_release: ${{ inputs.make_release }}
      kernelsu_variant: ${{ inputs.kernelsu_variant }}
      kernelsu_branch: ${{ inputs.kernelsu_branch }}
      # kernelsu_branch_other: ${{ inputs.kernelsu_branch_other }}
      version: ${{ inputs.version }}
      use_zram: ${{ inputs.use_zram }}
      use_kpm: ${{ inputs.use_kpm }}
      use_bbg: ${{ inputs.use_bbg }}

  trigger-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    needs:
        - get_manager
        - build-kernel-a12-5-10
        # - build-kernel-a13-5-10
        - build-kernel-a13-5-15
        # - build-kernel-a14-5-15
        - build-kernel-a14-6-1
        - build-kernel-a15-6-6
    if: ${{ inputs.make_release }}
    env:
      REPO_OWNER: zzh20188
      REPO_NAME: GKI_KernelSU_SUSFS
      SUS_VERSION: ''
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: "GKI内核: ${{ inputs.kernelsu_variant == 'Next' && 'KernelSU-' || '' }}${{ inputs.kernelsu_variant }}(${{ needs.get_manager.outputs.ksuVer }})  & SUSFS ${{ needs.get_manager.outputs.susVer }}"
      RELEASE_NOTES: |
        此处包含：**${{ inputs.kernelsu_variant == 'Next' && 'KernelSU-' || '' }}${{ inputs.kernelsu_variant }}**、SUSFS ${{ needs.get_manager.outputs.susVer }} ${{ inputs.use_zram && '、LZ4KD' || '' }}

        功能:
        -> ${{ inputs.kernelsu_variant == 'Next' && 'KernelSU-' || '' }}${{ inputs.kernelsu_variant }}${{ inputs.kernelsu_variant == 'Official' && '原版' || '' }}${{ inputs.kernelsu_branch == 'Dev(开发)' && format('({0})', needs.get_manager.outputs.ksuVer) || '稳定版' }}
        -> SUSFS ඞ ${{ needs.get_manager.outputs.susVer }}
        -> ${{ (inputs.kernelsu_variant == 'Official' || inputs.kernelsu_variant == 'MKSU') && 'Kprobes Hook + SUSFS_SUS_SU' || 'VFS Hooks v1.4' }}
        ${{ inputs.kernelsu_variant != 'Official' && '-> Magic Mount 支持' || '-> OVERLAYFS 支持' }}
        -> BBG安全补丁 ${{ inputs.use_bbg && '支持' || '不支持' }}
        ${{ inputs.use_kpm && '-> KPM 支持' || '' }}
        -> **LZ4KD&ONEPLUS_LZ4K**  ${{ inputs.use_zram && '开启' || '未开启' }}
        -> lz4: v1.10.0 ${{ inputs.use_zram && '开启' || '未开启' }}
        
        模块: 
        -> https://github.com/sidex15/ksu_module_susfs
        
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      - name: 确定分支为 KernelSU-${{ inputs.kernelsu_variant }}
        if: ${{ inputs.kernelsu_branch == 'Dev(开发)' || inputs.kernelsu_variant == 'MKSU' || inputs.kernelsu_variant == 'SukiSU'  }}
        run: |
          # Determine the branch based on user input
          if [[ "${{ inputs.kernelsu_variant }}" == "Official" || "${{ inputs.kernelsu_variant }}" == "MKSU" ]]; then
            BRANCH="main"
          elif [[ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]]; then
            BRANCH="main"
          elif [[ "${{ inputs.kernelsu_variant }}" == "Next" ]]; then
            BRANCH="next"
          else
            echo "Error: Custom branch not provided for 'Other(其他/指定)'" >&2
            exit 1
          fi

          # Store the selected branch in GITHUB_ENV
          echo "KSU_BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: 获取提交哈希值或标签并生成 URL 于 KernelSU-${{ inputs.kernelsu_variant }}
        run: |
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            echo "This is the Official variant"
            REPO_URL="https://github.com/tiann/KernelSU.git"
            REPO_URL2="tiann/KernelSU"
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "This is the Next variant"
            REPO_URL="https://github.com/KernelSU-Next/KernelSU-Next.git"
            REPO_URL2="KernelSU-Next/KernelSU-Next"
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "This is the MKSU variant"
            REPO_URL="https://github.com/5ec1cff/KernelSU.git"
            REPO_URL2="5ec1cff/KernelSU"
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "This is the SukiSU variant"
            REPO_URL="https://github.com/SukiSU-Ultra/SukiSU-Ultra.git"
            REPO_URL2="SukiSU-Ultra/SukiSU-Ultra"
          else
            echo "Unknown variant"
          fi
          
          if [[ "${{ inputs.kernelsu_branch }}" == "Stable(标准)" && "${{ inputs.kernelsu_variant }}" != "MKSU" ]]; then
            # Fetch the latest tag
            TAG=$(git ls-remote --tags --sort=-v:refname $REPO_URL | grep -o 'refs/tags/.*' | cut -d'/' -f3 | head -n1)
            if [[ -z "$TAG" ]]; then
              echo "Error: Could not fetch latest tag for Stable(标准)" >&2
              exit 1
            fi
            KSU_REF=$TAG
            KSU_URL="https://github.com/$REPO_URL2/releases/tag/$TAG"

          elif [[ "${{ inputs.kernelsu_branch }}" == "Dev(开发)" || "${{ inputs.kernelsu_variant }}" == "MKSU" || "${{ inputs.kernelsu_variant }}" == "SukiSU" ]]; then
            # Fetch the latest commit from "next" branch
            COMMIT_HASH=$(git ls-remote $REPO_URL refs/heads/$KSU_BRANCH | awk '{ print $1 }')
            if [[ -z "$COMMIT_HASH" ]]; then
              echo "Error: Could not fetch latest commit for Dev(开发)" >&2
              exit 1
            fi
            KSU_REF=$COMMIT_HASH
            KSU_URL="https://github.com/$REPO_URL2/commit/$COMMIT_HASH"
          fi

          # Echo the values to GitHub environment for later use
          echo "KSU_REF=$KSU_REF" >> $GITHUB_ENV
          echo "KSU_URL=$KSU_URL" >> $GITHUB_ENV
          echo "KernelSU Reference: $KSU_REF"
          echo "KernelSU URL: $KSU_URL"

      - name: 获取提交哈希值并生成提交 URL
        run: |
          GITLAB_OWNER="simonpunk"
          GITLAB_REPO="susfs4ksu"

          declare -A BRANCH_MAP=(
            ["gki_android12_5_10"]="gki-android12-5.10"
            ["gki_android13_5_10"]="gki-android13-5.10"
            ["gki_android13_5_15"]="gki-android13-5.15"
            ["gki_android14_5_15"]="gki-android14-5.15"
            ["gki_android14_6_1"]="gki-android14-6.1"
            ["gki_android15_6_6"]="gki-android15-6.6"
          )

          for var_name in "${!BRANCH_MAP[@]}"; do
            branch_name="${BRANCH_MAP[$var_name]}"
            COMMIT_HASH=$(git ls-remote https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO.git refs/heads/$branch_name | awk '{ print $1 }')

            if [[ -n "$COMMIT_HASH" ]]; then
              COMMIT_URL="https://gitlab.com/$GITLAB_OWNER/$GITLAB_REPO/-/commit/$COMMIT_HASH"
              echo "$branch_name Commit: $COMMIT_HASH"
              echo "$branch_name Commit URL: $COMMIT_URL"

              # Store commit hash and commit URL in GitHub environment
              echo "COMMIT_HASH_${var_name}=$COMMIT_HASH" >> "$GITHUB_ENV"
              echo "COMMIT_URL_${var_name}=$COMMIT_URL" >> "$GITHUB_ENV"
            fi
          done

      - name: 将提交哈希值和链接添加到 `RELEASE_NOTES` 中，并将 KernelSU-Next 引用添加到 `RELEASE_NOTES` 中。
        run: |
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            echo "This is the Official variant"
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "Official 管理器:" >> $GITHUB_ENV
            echo "-> https://github.com/tiann/KernelSU" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "This is the Next variant"
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "Next 管理器:" >> $GITHUB_ENV
            echo "-> https://github.com/KernelSU-Next/KernelSU-Next" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "This is the MKSU variant"
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "MKSU 管理器:" >> $GITHUB_ENV
            echo "-> https://github.com/5ec1cff/KernelSU" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "This is the SukiSU variant"
            echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
            echo "$RELEASE_NOTES" >> $GITHUB_ENV
            echo "SukiSU 管理器:" >> $GITHUB_ENV
            echo "-> https://github.com/SukiSU-Ultra/SukiSU-Ultra" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "Unknown variant"
          fi
          
      - name: 将提交哈希值和链接添加到 `RELEASE_NOTES` 中，并将 KernelSU-Next 引用添加到 `RELEASE_NOTES` 中。
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "LTO: thin" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "<details>" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "<summary>提交信息</summary>" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "提交的哈希值与链接(以下提交指的是,本次编译时,KSU或SUSFS所在的进度):" >> $GITHUB_ENV
          echo "- **KernelSU为${{ inputs.kernelsu_variant == 'Next' && 'KernelSU-' || '' }}${{ inputs.kernelsu_variant }}${{ inputs.kernelsu_branch == 'Dev(开发)' && format('({0})', needs.get_manager.outputs.ksuVer) || '稳定版' }}** (提交): [$KSU_REF]($KSU_URL)" >> $GITHUB_ENV
          echo "- **SUSFS4KSU** (提交):" >> $GITHUB_ENV
          echo "  - gki-android12-5.10: [$COMMIT_HASH_gki_android12_5_10]($COMMIT_URL_gki_android12_5_10)" >> $GITHUB_ENV
          echo "  - gki-android13-5.10: [$COMMIT_HASH_gki_android13_5_10]($COMMIT_URL_gki_android13_5_10)" >> $GITHUB_ENV
          echo "  - gki-android13-5.15: [$COMMIT_HASH_gki_android13_5_15]($COMMIT_URL_gki_android13_5_15)" >> $GITHUB_ENV
          echo "  - gki-android14-5.15: [$COMMIT_HASH_gki_android14_5_15]($COMMIT_URL_gki_android14_5_15)" >> $GITHUB_ENV
          echo "  - gki-android14-6.1: [$COMMIT_HASH_gki_android14_6_1]($COMMIT_URL_gki_android14_6_1)" >> $GITHUB_ENV
          echo "  - gki-android15-6.6: [$COMMIT_HASH_gki_android15_6_6]($COMMIT_URL_gki_android15_6_6)" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "</details>" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "点击下方 **【Assets】** 展开资源,底部还包含最新 **KSU管理器、CI构建SUSFS模块** " >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      # Get the Latest Tag from GitHub
      - name: 生成和创建新标签
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
            # Fetch the latest tag from GitHub (this is the latest tag based on the GitHub API)
            SUS_VERSION=${{ needs.get_manager.outputs.susVer }}
            LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name'| sed 's/-.*//')
            echo $SUS_VERSION
            echo $LATEST_TAG

            # 判断是否相等
            if [ "$SUS_VERSION" = "$LATEST_TAG" ]; then
              echo "版本相等"
              LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name')
            else
              echo "版本不相等"
              LATEST_TAG="$SUS_VERSION-r0"
            fi

            NEW_TAG=$(echo "$LATEST_TAG" | awk -F'-r' '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-r%d", $1, suffix}')
            
            
            # Output the new tag to be used
            echo "New tag: $NEW_TAG"
            
            # Set the new tag as an environment variable to be used in later steps
            echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV
            
            # Create the tag in the repository
            git tag $NEW_TAG
            git push --tags

      # 下载 A12 的附件（仅当 A12 生成成功或输入为 true 或为空时）
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded-artifacts
          

      # 如果 make_release 为 true，则创建 GitHub 发布并上传文件
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}  # Use the generated tag for the release
          prerelease: true  # Mark the release as a pre-release
          release_name: ${{ env.RELEASE_NAME }} # Pass the RELEASE_NAME to the action
          body: ${{ env.RELEASE_NOTES }}  # Pass the RELEASE_NOTES to the action

      - name: 上传KSU管理器 & SUS模块
        continue-on-error: true
        run: |
            echo "Uploading KSU管理器"
            gh release upload ${{ env.NEW_TAG }} "./downloaded-artifacts/*Manager*/*"
            gh release upload ${{ env.NEW_TAG }} "./downloaded-artifacts/susfs-*/*"

      - name: 动态上传发布资产
        run: |
          for file in ./downloaded-artifacts/*_kernel-*/*; do
              # Skip directories
              if [ -d "$file" ]; then
                  continue
              fi

              # Upload the file to the GitHub release
              echo "Uploading $file..."
              gh release upload ${{ env.NEW_TAG }} "$file"
          done

      # Display Files Uploaded
      - name: Display Files Uploaded
        run: |
          echo "GitHub release created with the following files:"
          ls ./downloaded-artifacts/**/*
